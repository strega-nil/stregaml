Laid out in order of when I want to do them

* rework lvalues!
* MIR
  - actually lay out types
    - check for recursive types
  - write an interpreter for MIR
  - LLVM backend
* externals
* linearity
* strings
* polymorphism!
  - syntax: `type Array[T: type, N: UInt]`
  - ```cafe
    func iter_map[
      T: type,
      U: type,
      E: effect,
    ](
      lst: List[T],
      f: func(T) E -> U,
    )
      Yield[Int32] | E
    {
      ...
    }
    ```
* real pattern matching
* implicit polymorphism!
  - ```cafe
    func iter_map(lst: List['t], f: func('t) 'e -> 'u)
      Yield[Int32] | 'e
    {
      ...
    }
    ```
* algebraic effects?

* names for stuff
  * tamper - build
  * pour
  * pitcher
  * shot
  * grind[er]
  * roast
  * toddy
  * drip

* name for caf√© programmers - baristas
