type V2 {
  data = record {
    x: Int32;
    y: Int32;
  };
}

association (+) : start;
association (-) = (+);
association (*) > (+);

association (<=) : none < (+);

func (+)(x: Int32, y: Int32) -> Int32 {
  __builtin(add)(x, y)
}
func (-)(x: Int32, y: Int32) -> Int32 {
  __builtin(sub)(x, y)
}
func (*)(x: Int32, y: Int32) -> Int32 {
  __builtin(mul)(x, y)
}

func (<=)(x: Int32, y: Int32) -> Bool {
  __builtin(less_eq)(x, y)
}

func double(x: Int32) -> Int32 {
  x + x
}

func map-in-place(v: &mut V2, f: func(Int32) -> Int32) {
  *(v).x <- f(*(v).x);
  let y = &mut(*(v).y);
  *(y) <- f(*(v).y);
}

func δ(v: V2) -> Int32 {
  if (v.x <= v.y) {
    v.y - v.x
  } else {
    v.x - v.y
  }
}

func main() -> Int32 {
  let mut v = V2::{x = 20; y = 30};
  map-in-place(&mut(v), double);
  δ(v)
}
