type Option {
  data = variant {
    None: Unit;
    Some: Int32;
  };
}

infix group Additive {
  associativity = start;
  precedence < Multiplicative;
}

infix group Multiplicative {
  associativity = start;
}

infix (+): Additive;
infix (\times): Multiplicative;

func (infix +)(x: Int32, y: Int32) -> Int32 {
  __builtin(add)(x, y)
}

func (infix \times)(x: Int32, y: Int32) -> Int32 {
  __builtin(mul)(x, y)
}

func (prefix \negative)(x: Int32) -> Int32 {
  __builtin(sub)(0, x)
}

func main() -> Int32 {
  let opt = Option::Some(20);
  match (opt) {
    Option::Some(x) => {
      x + 10 \times 3
    }
    Option::None(_unit) => {
      \negative 1
    }
  }
}
