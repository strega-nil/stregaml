/*
type V2 {
  data = record {
    x: Int32;
    y: Int32;
  };
}

infix func [+](x: Int32, y: Int32) -> Int32 {
  __builtin(add)(x, y)
}

func double(x: Int32) -> Int32 {
  __builtin(add)(x, x)
}
*/

/*
func map-in-place(v: &mut V2, f: func(Int32) -> Int32) {
  <-(*(v).x, f(*(v).x));
  let y = &mut(*(v).y);
  <-(*(y), f(*(v).y));
}

func Î´(v: V2) -> Int32 {
  if (__builtin(less_eq)(v.x, v.y)) {
    __builtin(sub)(v.y, v.x)
  } else {
    __builtin(sub)(v.x, v.y)
  }
}
*/

func main() -> Int32 {
  let mut v = 0;
  v <- 1;
  v
}
